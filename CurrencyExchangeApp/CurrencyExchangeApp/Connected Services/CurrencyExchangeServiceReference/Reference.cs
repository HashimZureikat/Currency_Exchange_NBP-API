//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrencyExchangeApp.CurrencyExchangeServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/CurrencyExchangeService.Models")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExchangeRate", Namespace="http://schemas.datacontract.org/2004/07/CurrencyExchangeService.Models")]
    [System.SerializableAttribute()]
    public partial class ExchangeRate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CurrencyCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal RateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CurrencyCode {
            get {
                return this.CurrencyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrencyCodeField, value) != true)) {
                    this.CurrencyCodeField = value;
                    this.RaisePropertyChanged("CurrencyCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CurrencyExchangeServiceReference.ICurrencyExchangeService")]
    public interface ICurrencyExchangeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/CreateUser", ReplyAction="http://tempuri.org/ICurrencyExchangeService/CreateUserResponse")]
        CurrencyExchangeApp.CurrencyExchangeServiceReference.User CreateUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/CreateUser", ReplyAction="http://tempuri.org/ICurrencyExchangeService/CreateUserResponse")]
        System.Threading.Tasks.Task<CurrencyExchangeApp.CurrencyExchangeServiceReference.User> CreateUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/LoginUser", ReplyAction="http://tempuri.org/ICurrencyExchangeService/LoginUserResponse")]
        CurrencyExchangeApp.CurrencyExchangeServiceReference.User LoginUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/LoginUser", ReplyAction="http://tempuri.org/ICurrencyExchangeService/LoginUserResponse")]
        System.Threading.Tasks.Task<CurrencyExchangeApp.CurrencyExchangeServiceReference.User> LoginUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/TopUpAccount", ReplyAction="http://tempuri.org/ICurrencyExchangeService/TopUpAccountResponse")]
        bool TopUpAccount(string username, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/TopUpAccount", ReplyAction="http://tempuri.org/ICurrencyExchangeService/TopUpAccountResponse")]
        System.Threading.Tasks.Task<bool> TopUpAccountAsync(string username, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/GetExchangeRate", ReplyAction="http://tempuri.org/ICurrencyExchangeService/GetExchangeRateResponse")]
        decimal GetExchangeRate(string currencyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/GetExchangeRate", ReplyAction="http://tempuri.org/ICurrencyExchangeService/GetExchangeRateResponse")]
        System.Threading.Tasks.Task<decimal> GetExchangeRateAsync(string currencyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/GetArchivedExchangeRates", ReplyAction="http://tempuri.org/ICurrencyExchangeService/GetArchivedExchangeRatesResponse")]
        CurrencyExchangeApp.CurrencyExchangeServiceReference.ExchangeRate[] GetArchivedExchangeRates(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/GetArchivedExchangeRates", ReplyAction="http://tempuri.org/ICurrencyExchangeService/GetArchivedExchangeRatesResponse")]
        System.Threading.Tasks.Task<CurrencyExchangeApp.CurrencyExchangeServiceReference.ExchangeRate[]> GetArchivedExchangeRatesAsync(System.DateTime startDate, System.DateTime endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/BuyCurrency", ReplyAction="http://tempuri.org/ICurrencyExchangeService/BuyCurrencyResponse")]
        bool BuyCurrency(string username, string currencyCode, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/BuyCurrency", ReplyAction="http://tempuri.org/ICurrencyExchangeService/BuyCurrencyResponse")]
        System.Threading.Tasks.Task<bool> BuyCurrencyAsync(string username, string currencyCode, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/SellCurrency", ReplyAction="http://tempuri.org/ICurrencyExchangeService/SellCurrencyResponse")]
        bool SellCurrency(string username, string currencyCode, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/SellCurrency", ReplyAction="http://tempuri.org/ICurrencyExchangeService/SellCurrencyResponse")]
        System.Threading.Tasks.Task<bool> SellCurrencyAsync(string username, string currencyCode, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/GetUserBalance", ReplyAction="http://tempuri.org/ICurrencyExchangeService/GetUserBalanceResponse")]
        decimal GetUserBalance(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/GetUserBalance", ReplyAction="http://tempuri.org/ICurrencyExchangeService/GetUserBalanceResponse")]
        System.Threading.Tasks.Task<decimal> GetUserBalanceAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/CalculateExchangeAmount", ReplyAction="http://tempuri.org/ICurrencyExchangeService/CalculateExchangeAmountResponse")]
        decimal CalculateExchangeAmount(string fromCurrency, string toCurrency, decimal amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyExchangeService/CalculateExchangeAmount", ReplyAction="http://tempuri.org/ICurrencyExchangeService/CalculateExchangeAmountResponse")]
        System.Threading.Tasks.Task<decimal> CalculateExchangeAmountAsync(string fromCurrency, string toCurrency, decimal amount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyExchangeServiceChannel : CurrencyExchangeApp.CurrencyExchangeServiceReference.ICurrencyExchangeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyExchangeServiceClient : System.ServiceModel.ClientBase<CurrencyExchangeApp.CurrencyExchangeServiceReference.ICurrencyExchangeService>, CurrencyExchangeApp.CurrencyExchangeServiceReference.ICurrencyExchangeService {
        
        public CurrencyExchangeServiceClient() {
        }
        
        public CurrencyExchangeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyExchangeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyExchangeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyExchangeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CurrencyExchangeApp.CurrencyExchangeServiceReference.User CreateUser(string username, string password) {
            return base.Channel.CreateUser(username, password);
        }
        
        public System.Threading.Tasks.Task<CurrencyExchangeApp.CurrencyExchangeServiceReference.User> CreateUserAsync(string username, string password) {
            return base.Channel.CreateUserAsync(username, password);
        }
        
        public CurrencyExchangeApp.CurrencyExchangeServiceReference.User LoginUser(string username, string password) {
            return base.Channel.LoginUser(username, password);
        }
        
        public System.Threading.Tasks.Task<CurrencyExchangeApp.CurrencyExchangeServiceReference.User> LoginUserAsync(string username, string password) {
            return base.Channel.LoginUserAsync(username, password);
        }
        
        public bool TopUpAccount(string username, decimal amount) {
            return base.Channel.TopUpAccount(username, amount);
        }
        
        public System.Threading.Tasks.Task<bool> TopUpAccountAsync(string username, decimal amount) {
            return base.Channel.TopUpAccountAsync(username, amount);
        }
        
        public decimal GetExchangeRate(string currencyCode) {
            return base.Channel.GetExchangeRate(currencyCode);
        }
        
        public System.Threading.Tasks.Task<decimal> GetExchangeRateAsync(string currencyCode) {
            return base.Channel.GetExchangeRateAsync(currencyCode);
        }
        
        public CurrencyExchangeApp.CurrencyExchangeServiceReference.ExchangeRate[] GetArchivedExchangeRates(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetArchivedExchangeRates(startDate, endDate);
        }
        
        public System.Threading.Tasks.Task<CurrencyExchangeApp.CurrencyExchangeServiceReference.ExchangeRate[]> GetArchivedExchangeRatesAsync(System.DateTime startDate, System.DateTime endDate) {
            return base.Channel.GetArchivedExchangeRatesAsync(startDate, endDate);
        }
        
        public bool BuyCurrency(string username, string currencyCode, decimal amount) {
            return base.Channel.BuyCurrency(username, currencyCode, amount);
        }
        
        public System.Threading.Tasks.Task<bool> BuyCurrencyAsync(string username, string currencyCode, decimal amount) {
            return base.Channel.BuyCurrencyAsync(username, currencyCode, amount);
        }
        
        public bool SellCurrency(string username, string currencyCode, decimal amount) {
            return base.Channel.SellCurrency(username, currencyCode, amount);
        }
        
        public System.Threading.Tasks.Task<bool> SellCurrencyAsync(string username, string currencyCode, decimal amount) {
            return base.Channel.SellCurrencyAsync(username, currencyCode, amount);
        }
        
        public decimal GetUserBalance(string username) {
            return base.Channel.GetUserBalance(username);
        }
        
        public System.Threading.Tasks.Task<decimal> GetUserBalanceAsync(string username) {
            return base.Channel.GetUserBalanceAsync(username);
        }
        
        public decimal CalculateExchangeAmount(string fromCurrency, string toCurrency, decimal amount) {
            return base.Channel.CalculateExchangeAmount(fromCurrency, toCurrency, amount);
        }
        
        public System.Threading.Tasks.Task<decimal> CalculateExchangeAmountAsync(string fromCurrency, string toCurrency, decimal amount) {
            return base.Channel.CalculateExchangeAmountAsync(fromCurrency, toCurrency, amount);
        }
    }
}
